import env.write_chr(char) -> void;
import env.write_int(int) -> void;
import env.write_flt(float) -> void;

structure vec<T>
{
    array<T> data;
    int size;
    int capacity;

    vec<T>(int capacity)
    {
        this.data = array<T>(capacity);
        this.size = 0;
        this.capacity = capacity;
    }

    static vec<T> from_array(array<T> from)
    {
        vec<T> new_vec = vec<T>(from.length);
        for (int i = 0; i < from.length; i++) {
            new_vec.set(i, from.get(i));
        }
        return new_vec;
    }

    array<T> to_array()
    {
        array<T> a = array<T>(this.size);
        for (int i = 0; i < this.size; i++) {
            a.set(i, this.get(i));
        }
        return a;
    }

    void reserve(int new_capacity)
    {
        if (new_capacity <= this.capacity) {
            return;
        } 
        vec<T> tmp = vec<T>(new_capacity);
        for (int i = 0; i < this.capacity; i++) {
            tmp.data.set(i, this.data.get(i));
        }
        this.data = tmp.data;
        this.capacity = new_capacity;
    }

    void shrink_to_fit() { this.reserve(this.size); }

    T get(int idx)
    {
        return this.data.get(idx);
    }

    void set(int idx, T val)
    {   
        if (this.size <= idx) {
            this.size = idx + 1;
        }
        this.data.set(idx, val);
    }

    void push_back(T value)
    {
        if (this.size + 1 > this.capacity) {
            int new_capacity = 4;
            if (this.capacity != 0) { new_capacity = this.capacity * 2; }
            this.reserve(new_capacity);
        }
        this.set(this.size, value);
    }

    T pop_back()
    {
        this.size = this.size - 1;
        return this.data.get(this.size);
    }

    void append(vec<T> other)
    {
        for (int i = 0; i < other.size; i++) {
            this.push_back(other.get(i));
        }
    }

    boolean equals(vec<T> other)
    {
        if (other.size != this.size) {
            return false;
        }
        for (int i = 0; i < this.size; i++) {
            if (other.get(i) != this.get(i)) {
                return false;
            }
        }
        return true;
    }


}

boolean is_space(int c)
{
    return c == ' ' || c == '\t' || c == '\n' || c == '\r';
}

boolean is_digit(int c)
{
    return c >= '0' && c <= '9';
}

int parse_int(string s)
{
    int i = 0;
    int n = s.size;
    int sign = 1;
    int value = 0;

    while (i < n && is_space(s.get(i))) {
        i = i + 1;
    }

    if (i < n && (s.get(i) == '+' || s.get(i) == '-')) {
        if (s.get(i) == '-') { sign = -1; }
        i = i + 1;
    }

    while (i < n && is_digit(s.get(i))) {
        value = value * 10 + (s.get(i) - '0');
        i = i + 1;
    }

    return sign * value;
}

float parse_float(string s)
{
    int i = 0;
    int n = s.size;
    int sign = 1;
    float value = 0.0;
    float frac = 1.0;

    while (i < n && is_space(s.get(i))) {
        i = i + 1;
    }

    if (i < n && (s.get(i) == '+' || s.get(i) == '-')) {
        if (s.get(i) == '-') { sign = -1; }
        i = i + 1;
    }

    while (i < n && is_digit(s.get(i))) {
        value = value * 10.0 + as<float>(s.get(i) - '0');
        i = i + 1;
    }

    if (i < n && s.get(i) == '.') {
        i = i + 1;
        while (i < n && is_digit(s.get(i))) {
            frac /= 10.0;
            value += as<float>(s.get(i) - '0') * frac;
            i = i + 1;
        }
    }

    return as<float>(sign) * value;
}


string int_to_string(int x)
{
    if (x == 0) { return "0"; }

    boolean neg = x < 0;
    int n = x;

    string rev = "";
    while (n != 0) {
        int d = n % 10;
        if (d < 0) { d = -d; }
        char ch = '0' + d;
        rev.push_back(ch);
        n = n / 10;
    }

    string out = "";
    if (neg) { out.push_back('-'); }

    for (int i = rev.size - 1; i >= 0; i--) {
        out.push_back(rev.get(i));
    }
    return out;
}

string float_to_string(float x)
{
    string s = "";
    # Very naive: break into int and fractional parts

    int int_part = as<int>(x);
    float frac_part = x - as<float>(int_part);

    # handle negative
    if (x < 0.0) {
        s.push_back('-');
        int_part = -int_part;
        frac_part = -frac_part;
    }

    # convert int part
    s.append(int_to_string(int_part));

    s.push_back('.');

    # take 6 decimal digits
    for (int i = 0; i < 6; i = i + 1) {
        frac_part = frac_part * 10.0;
        int digit = as<int>(frac_part);
        s.push_back(as<char>('0' + digit));
        frac_part = frac_part - as<float>(digit);
    }

    return s;
}

string boolean_to_string(boolean x)
{
    if (x) {
        return "true";
    } else {
        return "false";
    }
}


void print(string s)
{
    for (int i = 0; i < s.size; i++) {
        write_chr(s.get(i));
    }
    write_chr('\n');
}
